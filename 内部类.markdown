##内部类
###成员内部类
<pre>
package 匿名对象异常;
/**
 * 内部类：一个类定义在另外一个类的内部，那么该类就称作为内部类。
 * 
 * 内部类的class文件名： 外部类$内部类.class
 * 		好处：便于区分该class文件是属于哪个外部类的。
 * 
 * 内部类的类别：
 * 
 * 	成员内部类：
 * 		成员内部类的访问方式：
 * 			方式一：在外部类提供一个方法创建内部类的对象进行访问。
 * 			方式二：在其他类直接创建内部类的对象。
 * 			格式： 外部类.内部类  变量名 = new 外部类().new 内部类();
 * 		内部类的应用场景：我们在描述A事物的时候，发现描述的A事物内部还存在另外一个比较
 * 			复杂的事物B时候，而且这个比较复杂事物B还需要访问A事物的属性等数据，那么这时候
 * 		我们就可以使用内部类描述B事物。
 * 
 * 		eg. 人 ---->心脏
 * 		
 * 		class 人{
 * 			血
 * 			氧气
 * 			等........
 * 			class 心脏{
 * 				
 * 			}
 * 		}
 * 		
 * 		内部类要注意的细节：
 * 			1.如果外部类与内部类存在同名的成员变量时，在内部类中默认情况下是访问内部类的成员函数。
 * 			  可以通过  外部类.this.成员变量名  指定访问外部类的成员。
 * 			2.私有的成员内部类只能在外部类提供一个方法创建内部类的对象进行访问，不能在其他类创建对象了。
 * 			3.成员内部类一旦出现了静态的成员，那么该类也必须使用static修饰。
 * 				原因：
 * 	
 * 		内部类的好处：内部类可以直接访问外部类的所有成员。
 * 			
 * 
 * 
 * 	局部内部类：
 * 
 * */
class Outer{
	static int x = 100;	//Outer.class文件被加载到内存的时候存在内存中。
						//静态的成员数据是不需要对象存在的。
	//成员内部类
	static class Inner{
		static int i = 10;
		int x = 200;
		public void print(){
			System.out.println("成员内部类的print方法");
			System.out.println("成员内部类的成员变量i = "+i);
			System.out.println("成员内部类中的x = "+x);
			//System.out.println("从成员内部类访问外部类的成员变量x"+Outer.this.x);
		}
	}
	//在外部的方法中创建了内部类的对象，然后调用内部方法。
	public void instance(){
		Inner inner =new Inner();
		inner.print();
		System.out.println("x = "+x);
	}
	public Inner getInstance(){
		return new Inner();
	}
}

public class 内部类 {

	public static void main(String[] args) {
		/*
		Outer o = new Outer();
		o.instance();
		Outer.Inner inner  = new Outer().new Inner();
		inner.print();
		*/
		
	}

}

</pre>
###局部内部类
<pre>
package 匿名对象异常;
/**
 * 局部内部类：在一个类的方法内部定义另外一个类，那么另外一个类就称作为局部内部类。
 * 
 * 局部内部类要注意的细节：
 * 	1.如果局部内部类访问了一个局部变量，那么该局部变量必须使用final修饰。
 * 
 * */
class Outer2{
	String name = "外部类的name";
	public void test(){
		final int y = 100;	//y什么时候从内存中消失？方法执行完毕之后y消失。
		//局部内部类
		class Inner2{
			/*
			 * 当test方法执行完毕之后，那么y马上从内存中消失，而Inner2对象在方法执行完毕
			 * 的时候还没有从内存中消失，而inner对象的print方法还在访问着y变量，这时候的y变量
			 * 已经消失了，那么就给人感觉y的变量生命周期已经被延长了。
			 * 
			 * 解决方案：如果一个局部内部类访问一个局部变量的时候，那么就让该局部内部类访问
			 * 这个局部变量的复制品。
			 * */
			int x = 10;
			public void print(){
				System.out.println("这是局部内部类的print方法。"+name+" "+y);
			}
		}
		Inner2 inner = new Inner2();
		inner.print();
	}
	
}
public class 局部内部类 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Outer2 outer = new Outer2();
		outer.test();
	}

}

</pre>
###匿名内部类
<pre>
package 匿名对象异常;
/***
 * 匿名内部类：没有类名的类就称作匿名内部类
 * 匿名内部类的好处：简化书写。
 * 匿名内部类的使用前提：必须存在继承或者实现关系才能使用。
 * 
 * 
 * */
abstract class Animal2{
	public abstract Animal2 run();
	public abstract void sleep();
}

class Outer3{
	public void print(){
		//需要：在方法内部定义一个类继承Animal类，然后调用run方法。
		/*
		//局部内部类的做法
		class Dog2 extends Animal2{
			public void run(){
				System.out.println("狗在跑....");
			}
			public void sleep(){
				System.out.println("狗在睡觉....");
			}
		}
		//创建对象
		Dog2 d = new Dog2();
		d.run();
		d.sleep();
		*/
		//匿名内部类：匿名内部类只是没有类名，其他的一概成员都是具备的。
		//匿名内部类与Animal是继承关系。目前是创建Animal子类的对象。
		
		Animal2 a = new Animal2(){
			//匿名内部类的成员
			public Animal2 run(){
				System.out.println("狗在跑....");
				return this;
			}
			//特有的方法
			public  void bite(){
				System.out.println("狗在咬人....");
			}
			public void sleep(){
				System.out.println("狗睡觉。。。。");
			}
		};
		a.sleep();
		//a.run().bite();
		//a.bite();
		
		
	}
}

public class 匿名内部类 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Outer3 outer = new Outer3();
		outer.print();
	}

}

</pre>
###实现关系下的匿名内部类
<pre>
package 匿名对象异常;
/**
 * 实现关系下的匿名内部类
 * */
interface Dao2{
	public void add();
}
class Outer5{
	public void print(){
		//创建一个匿名内部类的对象
		new Dao2(){//不是接口不能创建对象吗？怎么现在又可以了？
			public void add(){
				System.out.println("添加。。。。");
			}
		}.add();
	}	
}

class UserDao2 implements Dao2{

	@Override
	public void add() {
		// TODO Auto-generated method stub
		System.out.println("UserDao2中的add方法 ");
	}
	
}

public class Demo7 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Outer5 o5 = new Outer5();
		o5.print();
		//test(new UserDao2());
		test(new Dao2(){
			public void add(){
				System.out.println("添加。。。。。");
			}
			
		});
	}
	//调用这个方法。。。。
	//形参类型是一个接口引用。。。
	public static void test(Dao2 d){
		d.add();
	}
}

</pre>