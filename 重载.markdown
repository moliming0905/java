#重载
<pre>
package 静态函数;
/*
 * 目前的问题：父类的功能无法满足子类的需求。
 * 方法的重写：子父类出现了同名的函数，这个我们就称作为方法的重写。
 * 
 * 什么时候要使用方法的重写：父类的功能无法满足子类的需求时。
 * <font color="red">
 * 方法重写要注意的事项：
 * 1.方法名与形参列表必须一致。
 * 2.方法重写时，子类的权限修饰符必须要大于或者等于父类的权限修饰符。
 * 3.方法重写时，子类的返回值类型必须要小于或者等于父类的返回值类型。
 * 4.方法重写时，子类抛出的异常类型要小于或者等于父类抛出的异常类型。
 * 	Exception(最坏的)
 * 	RuntimeException(小坏的)
 * </font>
 * 方法的重载：
 * 	在一个类中，存在两个或者两个以上的同名函数，称作为方法重载。
 * <font color="lightgreen">
 * 方法重载的要求
 * 	1.函数名要一致
 * 	2.形参列表不一致（形参的个数或形参的类型不一致）
 * 	3.与返回值类型无关</font>
 * */
class Animal{
	String name;	//名字
	public Animal(){}
	public Animal(String name){
		this.name = name;
	}
	public void eat() throws Exception{
		System.out.println(this.name+"吃树皮。。。。");
	}
}
class Fish extends Animal{
	String num;
	public Fish(String name){
		super(name);	//指定调用，父类带参的构造方法。
	}
	//重写父类的eat方法
	public void eat() throws RuntimeException{
		System.out.println("吃点开胃菜。。。");
		System.out.println("喝点汤。。。");
		System.out.println("吃点番薯。。。");
		System.out.println("吃点麻辣香锅。。。");
		System.out.println("吃点串串。。。");
	}
}
public class Demo10 {

	public static void main(String[] args) {
		Fish z = new Fish("xiaoriben");
		z.eat();
	}

}

</pre>