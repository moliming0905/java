##错误&异常
<pre>
package 匿名对象异常;
/* *
 * 异常的体系：
 * 		Throwable	所有异常或者错误类的超类
 * 			Error 错误 	错误一般是用于jvm或者是硬件引发的问题，所以我们一般不会通过代码去处理错误的。
 * 			Exception 异常	是需要通过代码去处理的。
 * 如何区分错误与异常呢？
 * 		如果程序出现了不正常的信息，如果不正常的信息的类名是以Error结尾的，那么肯定是一个错误。
 * 		如果是以Exception结尾的，那么肯定就是一个异常。
 * 
 * */
public class Demo9 {
	public static void  main(String[] args){
		//java虚拟机在默认情况下只能管理64Mb的内存。
		byte[] buf = new byte[1024*1024*1024];
		System.out.println("Hello World!!");
	}
}

</pre>
####执行结果
<pre><font color="red">
Exception in thread "main" java.lang.OutOfMemoryError: Java heap space
	at 匿名对象异常.Demo9.main(Demo9.java:15)
</font>
</pre>

##异常
<pre>
package 匿名对象异常;
/****
 * 疑问：下面的信息时通过printStackTrace方法打印出来，那么异常对象从何而来呢？
 * 
 * Exception in thread "main" java.lang.ArithmeticException: / by zero
 * 		at 匿名对象异常.Demo10.div(Demo10.java:10)
 * 		at 匿名对象异常.Demo10.main(Demo10.java:7)
 * 
 * java虚拟机(JVM)运行到a/b这个语句的时候,发现b为0,除数为零在我们现实生活中属于不正常的
 * 情况，jvm一旦发现了这种不正常的情况时候，那么jvm就会马上创建一个对应的异常对象，并且会调用这个异常对象
 * 的printStackTrace的方法来处理。
 * 
 * 
 * 异常的处理：
 * 		方式一：捕获处理
 * 			捕获处理的格式：
 * 				try{
 * 					可能发生异常的代码
 * 				}catch(捕获的异常类型  变量名){
 * 					处理异常的代码。
 * 				}
 * 捕获处理要注意的细节：
 * 		1.如果try块中的代码出现了异常经过了处理之后，那么try-catch块外面的代码可以正常执行。
 * 		2.如果try块中出了异常的代码，那么在try块中出现异常代码后面的代码是不会执行了。
 * 		3.一个try块后面是可以跟有多个catch块的，是可以捕获多种异常类型的。
 * 		4.一个try块可以捕获多种异常的类型，但是捕获的异常类型必须从小到大进行捕获，否则编译报错。
 * 
 * 疑问一：异常的处理感觉没有多大作用，因为都是输出一个话而已？
 * 		异常处理非常有用，只不过是由于我么目前所接触的知识点太过于局限而已。	
 * 
 * 疑问二：以后捕获处理的时候是否就是捕获Exception即可？	
 * 		错的，因为我么在现实开发中遇到不同的异常类型的时候，我们往往会有不同的处理方式。
 * 	所以要分开不同的异常类型处理。
 * 
 * 		方式二：抛出处理
 * */
public class Demo10 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
			int[] arr = null;
			div(4,2,arr);
				
	}
	public static void div(int a,int b,int[] arr){
		int c = 0;
		try{
			c = a/b;		//jvm在这句话的时候发现了不正常的 情况，那么就会创建一个对应的异常对象。
			System.out.println("略略略。。。。");
			System.out.println("数组的长度： "+arr.length);
		}
		/*catch(Exception e){
			System.out.println("急诊室包罗万象。");
			System.out.println("Exception info: "+e.toString());
		}
		*/
		
		catch(ArithmeticException e){
			//处理异常的代码
			//e.printStackTrace();
			System.out.println("toString:"+e.toString());
		}
		catch(NullPointerException e){
			System.out.println("出现了空指针异常。");
		}
		catch(Exception e){
			System.out.println("在Exception catch块中"+e.toString());
		}
		System.out.println("c = "+c);
		
	}

}

</pre>
###抛异常
<pre>
package 匿名对象异常;
/**
 * 异常的处理方式——抛出处理
 * 抛出处理两个关键字
 * throw
 * 
 * throws
 * 抛出处理要注意的细节：
 * 		1.如果一个方法的内部抛出了一个异常对象，那么必须要在方法上声明抛出。
 * 		2.如果调用了一个声明抛出异常的方法，那么调用者必须要处理异常 。
 * 		3.如果一个方法内部抛出了一个异常对象，那么throw语句后面的代码都不会再执行。
 * 			一个方法遇到了throw关键字，该方法也会马上停止执行的。
 * 		4.在一种情况下，只能抛出一种类型异常对象。
 * throw与throws两个关键字：
 * 		1.throw关键字是用于方法内部，throws是用于方法声明上的。
 * 		2.throw关键字是用于方法内部抛出一个异常对象的，throw关键字是用于在方法声明上声明抛出异常类型的。
 * 		3.throw关键字后面只能有一个异常对象，throws后面一次可以声明抛出多种类型的异常。
 * 
 * 疑问： 何时使用抛出处理？何时使用捕获处理？原则是什么？
 * 		如果你需要通知到调用者，你的代码出了问题，那么这时候就使用抛出处理。
 * 		如果代码是直接与用户打交道遇到了异常千万不要再抛，再抛的话，就给了用户了。
 * 		这时候就应该使用捕获处理。
 * 		
 * 
 * 
 * */
public class Demo11 {

	public static void main(String[] args) throws Exception{
		// TODO Auto-generated method stub
		/*
		try{
			div(3,0);//调用了一个声明抛出异常类型的方法。
		}catch(Exception e){
			System.out.println("Exception info: "+e.toString());
			e.printStackTrace();
		}
		*/
		int[] arr = null;
		div(4,0,arr);
	}
	public static void div(int a, int b,int[] arr) throws Exception,NullPointerException{
		
		if(b == 0){
			throw new Exception();//抛出一个异常对象。
			//throw new NullPointerException();
		}else if(arr==null){
			throw new NullPointerException();
		}
		int c = a/b;
		System.out.println("c = "+c);
	}
}

</pre>